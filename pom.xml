<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.governmentcio</groupId>
	<artifactId>seleniumframework</artifactId>
	<version>3.2-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Selenium POM Framework</name>

	<description>
	The Selenium Page Object Model (POM) Framework allows for the modeling and testing of an application UI via the page object model.
	The AbstractPageObject which implements the PageObject interface provides the base functionality for each concrete implementation. 
	Each page in the UI is modeled by extending this AbstractPageObject class with the specific attributes contained on each page and the specific functionality for that page.
	Page objects are wired together by returning the appropriate page object implementation for a specific function. The user of that function is then able to interact with that 
	page object which emulates a user's interaction with the application's UI. These page objects with their appropriate wiring can then be used in unit testing framework such as 
	JUnit in order to test the work flow of an application from a user perspective. 
	</description>

	<url>http://www.governmentcio.com</url>

	<properties>

		<!-- Dependency versions -->

		<junit.version>4.12</junit.version>
		<selenium.version>3.141.59</selenium.version>
		<jdk.version>1.8</jdk.version>
		<slf4j.version>1.7.12</slf4j.version>

		<!-- Plugin versions -->

		<findbugs.maven.plugin.version>3.0.5</findbugs.maven.plugin.version>
		<checkstyle.plugin.version>2.9.1</checkstyle.plugin.version>
		<build-helper-maven-plugin.version>1.9.1</build-helper-maven-plugin.version>
		<maven.eclipse.plugin.version>2.10</maven.eclipse.plugin.version>
		<maven.project.info.reports.plugin>2.8.1</maven.project.info.reports.plugin>
		<maven.compiler.plugin.version>3.3</maven.compiler.plugin.version>
		<maven.jxr.plugin.version>2.3</maven.jxr.plugin.version>
		<maven.resources.plugin.version>3.0.2</maven.resources.plugin.version>
		<maven.release.plugin.version>2.5.2</maven.release.plugin.version>
		<maven.dependency.plugin.version>2.10</maven.dependency.plugin.version>
		<maven.surefire.plugin.version>2.20</maven.surefire.plugin.version>
		<jacoco.maven.plugin.version>0.8.2</jacoco.maven.plugin.version>
		<maven.javadoc.plugin.version>2.10.3</maven.javadoc.plugin.version>
		<maven.project.info.reports.plugin.version>2.8.1</maven.project.info.reports.plugin.version>
		<extentreports.version>2.41.2</extentreports.version>
		<dependency.check.maven.version>1.4.5</dependency.check.maven.version>

		<!-- Source encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Gitlab -->
		<gitlab-address>www.gitlab.devgovcio.com/wdrew</gitlab-address>

		<!-- Jenkins CI server -->
		<jenkins-address>jenkins.devgovcio.com</jenkins-address>

		<!-- Artifactory -->
		<artifact-repo-address-port>artifactory.devgovcio.com:8081</artifact-repo-address-port>

		<!-- Checkstyle standards location -->
		<checkstyle.config.location>resources/customized-sun-checks.xml</checkstyle.config.location>

		<!-- Used to locate the profile specific configuration file. -->
		<build.profile.id>dev</build.profile.id>

		<!-- Destination for JaCoCo report output -->
		<jacoco.it.execution.data.file>${project.build.directory}/coverage-reports/jacoco-it.exec</jacoco.it.execution.data.file>
		<jacoco.ut.execution.data.file>${project.build.directory}/coverage-reports/jacoco-ut.exec</jacoco.ut.execution.data.file>

		<!-- Only unit tests are run by default. -->
		<skip.integration.tests>true</skip.integration.tests>
		<skip.unit.tests>false</skip.unit.tests>

		<!-- Sonar -->
		<sonar-address>sonar.devgovcio.com</sonar-address>

	</properties>

	<!-- Profiles -->

	<profiles>

		<profile>
			<id>all-tests</id>
			<properties>
				<build.profile.id>all-tests</build.profile.id>
				<!-- All tests are run. -->
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>false</skip.unit.tests>
			</properties>
		</profile>

		<profile>
			<id>dev</id>
		</profile>

		<profile>
			<id>integration-test</id>
			<properties>
				<!-- Used to locate the profile specific configuration file. -->
				<build.profile.id>integration-test</build.profile.id>
				<!-- Only integration tests are run. -->
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>true</skip.unit.tests>
			</properties>
		</profile>

		<profile>
			<id>windows</id>
			<activation>
				<os>
					<name>Windows XP</name>
					<family>Windows</family>
					<arch>x86</arch>
					<version>5.1.2600</version>
				</os>
			</activation>
			<properties>
				<custom-smx-type>zip</custom-smx-type>
				<script-extension>.bat</script-extension>
			</properties>
		</profile>

		<profile>
			<id>win64</id>
			<activation>
				<os>
					<family>windows</family>
					<name>Windows 7</name>
					<arch>x86</arch>
				</os>
			</activation>
			<properties>
				<custom-smx-type>zip</custom-smx-type>
				<script-extension>.bat</script-extension>
			</properties>
		</profile>

		<profile>
			<id>unix</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>
			<properties>
				<custom-smx-type>tar.gz</custom-smx-type>
				<script-extension />
			</properties>
		</profile>

		<profile>
			<id>sonar</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<sonar.host.url>http://${sonar-address}:9000</sonar.host.url>
				<sonar.language>java</sonar.language>
				<sonar.jdbc.driver>com.mysql.jdbc.Driver</sonar.jdbc.driver>
				<sonar.sources>src/main/java</sonar.sources>
				<sonar.tests>src/test</sonar.tests>
				<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
				<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
				<sonar.jacoco.reportPaths>${basedir}/target/jacoco.exec</sonar.jacoco.reportPaths>
			</properties>
		</profile>

		<profile>
			<id>sec-scan</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>

				<plugins>

					<!-- OWASP dependency security scan -->

					<plugin>
						<groupId>org.owasp</groupId>
						<artifactId>dependency-check-maven</artifactId>
						<version>${dependency.check.maven.version}</version>
						<configuration>
							<assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- FindBugs -->

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>findbugs-maven-plugin</artifactId>
						<version>${findbugs.maven.plugin.version}</version>
						<configuration>
							<!-- Enables analysis which takes more memory but finds more bugs. 
								If you run out of memory, changes the value of the effort element to 'Low'. -->
							<effort>Max</effort>
							<!-- Reports all bugs (other values are medium and max) -->
							<threshold>Low</threshold>
							<!-- Produces XML report -->
							<xmlOutput>true</xmlOutput>
							<!-- Configures the directory in which the XML report is created -->
							<findbugsXmlOutputDirectory>${project.build.directory}/findbugs</findbugsXmlOutputDirectory>
							<failOnError>false</failOnError>
						</configuration>
						<executions>
							<!-- Ensures that FindBugs inspects source code when project is compiled. -->
							<execution>
								<id>analyze-compile</id>
								<phase>compile</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>


				</plugins>
			</build>
		</profile>

	</profiles>

	<!-- SCM connection -->
	<scm>
		<connection>scm:git:http://${gitlab-address}/selenium-pom-framework.git</connection>
	</scm>

	<!-- Distribution management -->

	<distributionManagement>

		<snapshotRepository>
			<id>selenium-pom-snapshot-local</id>
			<name>Local repository for Selenium POM framework snapshot artifacts</name>
			<url>http://${artifact-repo-address-port}/artifactory/selenium-pom-snapshot-local 
		</url>
		</snapshotRepository>

		<repository>
			<id>selenium-pom-release-local</id>
			<name>Local repository for Selenium POM framework release artifacts</name>
			<url>http://${artifact-repo-address-port}/artifactory/selenium-pom-release-local 
		</url>
		</repository>

		<site>
			<id>site01</id>
			<url>scp://projects.devgovcio.com/var/www/html/seleniumpomframework-${project.version}</url>
		</site>

	</distributionManagement>

	<!-- Build -->

	<build>

		<defaultGoal>install</defaultGoal>

		<filters>
			<filter>profiles/${build.profile.id}/config.properties</filter>
		</filters>

		<resources>
			<resource>
				<filtering>true</filtering>
				<directory>src/main/resources</directory>
			</resource>
		</resources>

		<plugins>

			<!-- Used to add integration test source directories to our build. -->

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${build-helper-maven-plugin.version}</version>
				<executions>
					<!-- States that the plugin's add-test-source goal is executed at generate-test-sources 
						phase. -->
					<execution>
						<id>add-integration-test-sources</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<!-- Configures the source directory of integration tests. -->
							<sources>
								<source>src/integration-test/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>${maven.eclipse.plugin.version}</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>${maven.project.info.reports.plugin}</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.plugin.version}</version>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>${maven.jxr.plugin.version}</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${checkstyle.plugin.version}</version>
				<executions>
					<execution>
						<id>checkstyle</id>
						<phase>verify</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<consoleOutput>false</consoleOutput>
							<failsOnError>true</failsOnError>
							<failOnViolation>false</failOnViolation>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven.resources.plugin.version}</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven.dependency.plugin.version}</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>${maven.release.plugin.version}</version>
				<configuration>
					<preparationGoals>clean verify install</preparationGoals>
				</configuration>
			</plugin>

			<!-- Surefire plugin - unit tests -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.plugin.version}</version>
				<configuration>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
					<!-- Skips unit tests if the value of skip.unit.tests property is true -->
					<skipTests>${skip.unit.tests}</skipTests>
					<!-- Excludes integration tests when unit tests are run. -->
					<excludes>
						<exclude>**/IT*.java</exclude>
					</excludes>
					<systemPropertyVariables>
						<propertyName>SELENIUM_GRID_URL</propertyName>
						<buildDirectory>${selenium.grid.url}</buildDirectory>
					</systemPropertyVariables>
				</configuration>
			</plugin>

			<!-- FindBugs -->

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>${findbugs.maven.plugin.version}</version>
				<configuration>
					<!-- Enables analysis which takes more memory but finds more bugs. If 
						you run out of memory, changes the value of the effort element to 'Low'. -->
					<effort>Max</effort>
					<!-- Reports all bugs (other values are medium and max) -->
					<threshold>Low</threshold>
					<!-- Produces XML report -->
					<xmlOutput>true</xmlOutput>
					<!-- Configures the directory in which the XML report is created -->
					<findbugsXmlOutputDirectory>${project.build.directory}/findbugs</findbugsXmlOutputDirectory>
					<failOnError>false</failOnError>
				</configuration>
				<executions>
					<!-- Ensures that FindBugs inspects source code when project is compiled. -->
					<execution>
						<id>analyze-compile</id>
						<phase>compile</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- JaCoCo plugin for reporting unit test coverage -->

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.maven.plugin.version}</version>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.ut.execution.data.file}</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.ut.execution.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Failsafe plugin is executed. -->
					<execution>
						<id>pre-integration-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.it.execution.data.file}</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>failsafeArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for integration tests after 
						integration tests have been run. -->
					<execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.it.execution.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Selenium -->

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>selenium-maven-plugin</artifactId>
				<version>2.3</version>
			</plugin>

			<!-- Failsafe plugin - integration tests -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.15</version>
				<executions>
					<!-- Ensures that both integration-test and verify goals of the Failsafe 
						Maven plugin are executed. -->
					<execution>
						<id>integration-tests</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<!-- Sets the VM argument line used when integration tests are run. -->
							<argLine>${failsafeArgLine}</argLine>
							<!-- Skips integration tests if the value of skip.integration.tests 
								property is true -->
							<skipTests>${skip.integration.tests}</skipTests>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- War creation -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
			</plugin>

			<!-- Site creation -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<port>80</port>
				</configuration>
				<dependencies>
					<dependency><!-- add support for ssh/scp -->
						<groupId>org.apache.maven.wagon</groupId>
						<artifactId>wagon-ssh</artifactId>
						<version>1.0</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.0.2</version>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
			</plugin>

		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											build-helper-maven-plugin
										</artifactId>
										<versionRange>
											[1.9.1,)
										</versionRange>
										<goals>
											<goal>add-test-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- Reporting -->

	<reporting>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.5</version>
			</plugin>

			<!-- PMD -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.7</version>
				<configuration>
					<linkXref>true</linkXref>
					<sourceEncoding>utf-8</sourceEncoding>
					<minimumTokens>100</minimumTokens>
					<targetJdk>${jdk.version}</targetJdk>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven.javadoc.plugin.version}</version>
			</plugin>

			<!-- Findbugs -->

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>3.0.2</version>
			</plugin>

			<!-- Checkstyle -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${checkstyle.plugin.version}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>checkstyle</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

			<!-- OWASP dependency security scan -->

			<plugin>
				<groupId>org.owasp</groupId>
				<artifactId>dependency-check-maven</artifactId>
				<version>${dependency.check.maven.version}</version>
				<configuration>
					<assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
				</configuration>
				<reportSets>
					<reportSet>
						<reports>
							<report>aggregate</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>

			<!-- Findbugs -->

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>${findbugs.maven.plugin.version}</version>
				<configuration>
					<!-- Enables analysis which takes more memory but finds more bugs. If 
						you run out of memory, changes the value of the effort element to 'Low'. -->
					<effort>Max</effort>
					<!-- Reports all bugs (other values are medium and max) -->
					<threshold>Low</threshold>
					<!-- Produces XML report -->
					<xmlOutput>true</xmlOutput>
					<!-- Configures the directory in which the XML report is created -->
					<findbugsXmlOutputDirectory>${project.build.directory}/findbugs</findbugsXmlOutputDirectory>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>${maven.project.info.reports.plugin.version}</version>
			</plugin>

		</plugins>

	</reporting>

	<!-- Dependency management -->

	<dependencyManagement>

		<dependencies>


			<!-- Logging with Java commons logging dependencies -->

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.testng/testng -->
			<dependency>
				<groupId>org.testng</groupId>
				<artifactId>testng</artifactId>
				<version>6.14.3</version>
			</dependency>


			<!-- JUnit -->

			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>

			<!-- Selenium -->

			<dependency>
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-java</artifactId>
				<version>${selenium.version}</version>
			</dependency>

			<dependency>
				<groupId>com.relevantcodes</groupId>
				<artifactId>extentreports</artifactId>
				<version>${extentreports.version}</version>
			</dependency>

			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>23.0</version>
			</dependency>



		</dependencies>

	</dependencyManagement>

	<dependencies>

		<dependency>
			<groupId>io.github.bonigarcia</groupId>
			<artifactId>webdrivermanager</artifactId>
			<version>3.6.1</version>
		</dependency>

		<!-- Logging with Java commons logging dependencies -->

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>


		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
		</dependency>

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
		</dependency>

		<dependency>
			<groupId>com.relevantcodes</groupId>
			<artifactId>extentreports</artifactId>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>org.zaproxy</groupId>
			<artifactId>zap-clientapi</artifactId>
			<version>1.6.0</version>
		</dependency>
		<dependency>
			<groupId>com.deque</groupId>
			<artifactId>axe-selenium</artifactId>
			<version>2.1</version>
		</dependency>
	</dependencies>

</project>
